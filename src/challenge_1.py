from pyspark.sql import functions as f
from pyspark.sql import DataFrame
from pyspark.sql.window import Window


def question1(df_ch1_cars:DataFrame, df_ch1_sales:DataFrame)-> DataFrame:
    """
    Question1: What are the details of all cars purchased in the year 2022?
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :return:
    a dataframe with cars information that were purchased in the year 2022
    """

    df_ch1_sales = df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")
    df_cars_detail = df_ch1_cars.join(df_ch1_sales, df_ch1_cars.car_id == df_ch1_sales.sales_car_id, 'inner').\
            where(f.year(df_ch1_sales.purchase_date) == 2022).select( "car_id",
                                                                       "make",
                                                                        "type",
                                                                        "style",
                                                                        "cost_$",
                                                                        "purchase_date"
                                                                      )

    return df_cars_detail


def question2(df_ch1_sales: DataFrame, df_ch1_salesperson: DataFrame)-> DataFrame:
    """
    Question2:  What is the total number of cars sold by each salesperson??
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe with cars information that were purchased in the year 2022
    """

    df_ch1_sales = df_ch1_sales.withColumnRenamed("car_id", "sales_car_id").\
        withColumnRenamed("salesman_id", "id_salesman")
    df_salesman_sold = df_ch1_sales.\
        groupby(df_ch1_sales.id_salesman).agg(f.count(df_ch1_sales.sales_car_id).alias("total_cars_sold")).\
        join(df_ch1_salesperson, df_ch1_sales.id_salesman == df_ch1_salesperson.salesman_id, 'inner')\
        .select("salesman_id","name", "total_cars_sold")

    return df_salesman_sold


def question3(df_ch1_cars:DataFrame, df_ch1_sales: DataFrame, df_ch1_salesperson: DataFrame)-> DataFrame:
    """
    Question3:  What is the total revenue generated by each salesperson?
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe with salesman name and revenue generated by each salesman, ordered by salesman ID
    """

    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_salesman_revenue = \
        df_ch1_sales.join(df_ch1_cars, df_ch1_sales.sales_car_id == df_ch1_cars.car_id, 'inner')\
        .groupby(df_ch1_sales.id_salesman).agg(f.sum(df_ch1_cars['cost_$']).alias("sales_revenue"))\
        .join(df_ch1_salesperson, df_ch1_sales.id_salesman == df_ch1_salesperson.salesman_id, 'inner')\
        .select("id_salesman", "name", "sales_revenue").orderBy("id_salesman")

    return df_salesman_revenue


def question4(df_ch1_cars:DataFrame, df_ch1_sales: DataFrame, df_ch1_salesperson: DataFrame)-> DataFrame:
    """
    Question4:  What are the details of the cars sold by each salesperson?
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe salesman_id, name and all details about the car
    """
    win_func = Window.partitionBy("id_salesman").orderBy("id_salesman")

    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_salesman_car_details = \
        df_ch1_sales.join(df_ch1_cars, df_ch1_sales.sales_car_id == df_ch1_cars.car_id, 'inner')\
        .join(df_ch1_salesperson, df_ch1_sales.id_salesman == df_ch1_salesperson.salesman_id, 'inner') \
        .withColumn("row_number", f.row_number().over(win_func)) \
        .select("id_salesman", "name",  "make", "type", "style", "cost_$").orderBy("id_salesman")

    return df_salesman_car_details


def question5(df_ch1_cars: DataFrame, df_ch1_sales: DataFrame)-> DataFrame:
    """
    Question5:  What is the total revenue generated by each car type?
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe salesman_id, name and all details about the car
    """
    win_func = Window.partitionBy("type")

    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_revenue_by_cartype = \
        df_ch1_sales.join(df_ch1_cars, df_ch1_sales.sales_car_id == df_ch1_cars.car_id, 'inner')\
        .withColumn("revenue", f.sum(f.col('cost_$')).over(win_func))\
        .select("car_id", "type", "revenue").orderBy("car_id")\
        .distinct().orderBy("car_id")

    return df_revenue_by_cartype


def question6(df_ch1_cars: DataFrame, df_ch1_sales: DataFrame, df_ch1_salesperson: DataFrame)-> DataFrame:
    """
    Question6: What are the details of the cars sold in the year 2021 by salesperson 'Emily Wong'?
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe salesman_id, name and all details about the car
    """

    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_car_details_by_Emily = \
        df_ch1_sales.join(df_ch1_cars, df_ch1_sales.sales_car_id == df_ch1_cars.car_id, 'inner')\
        .join(df_ch1_salesperson, df_ch1_sales.id_salesman == df_ch1_salesperson.salesman_id)\
        .where("name == 'Emily Wong'").where(f.year("purchase_date") == '2021')\
        .select("name", "car_id", "make", "type", "style", "cost_$").orderBy("car_id")\


    return df_car_details_by_Emily


def question7(df_ch1_cars: DataFrame, df_ch1_sales: DataFrame)-> DataFrame:
    """
    Question7:  What is the total revenue generated by the sales of hatchback cars?
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe salesman_id, name and all details about the car
    """
    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_revenue_by_cartype = \
        df_ch1_sales.join(df_ch1_cars, df_ch1_sales.sales_car_id == df_ch1_cars.car_id, 'inner') \
        .groupby("style").agg(f.sum(f.col('cost_$')).alias("revenue"))\
        .where(f.col("style") == 'Hatchback')\
        .select("style", "revenue")

    return df_revenue_by_cartype


def question8(df_ch1_cars: DataFrame, df_ch1_sales: DataFrame)-> DataFrame:
    """
    Question8: What is the total revenue generated by the sales of SUV cars in the year 2022?
    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe with SUV cars revenue in the 2022
    """
    win_func = Window.partitionBy("style")

    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_revenue_suv_in_2022 = \
        df_ch1_sales.join(df_ch1_cars, df_ch1_sales.sales_car_id == df_ch1_cars.car_id, 'inner') \
            .where(f.year("purchase_date") == '2022') \
            .withColumn("revenue_2022", f.sum(f.col("cost_$")).over(win_func))\
            .filter("style == 'SUV'")\
            .select("style", "revenue_2022").distinct()

        #.where(f.year("purchase_date") == '2022')\
        #.groupby("style").agg(f.sum(f.col("cost_$")))\
        #.where("style == 'SUV'")

    return df_revenue_suv_in_2022


def question9(df_ch1_sales: DataFrame, df_ch1_salesperson: DataFrame) -> DataFrame:
    """
    Question9:  What is the name and city of the salesperson who sold the most number of cars in the year 2023?
    :param spark:
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe with salesman information who sold the most numnber of cars
    """
    win_func = Window.partitionBy("id_salesman")

    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_salesman_highest_cars = \
        df_ch1_sales.join(df_ch1_salesperson, df_ch1_sales.id_salesman == df_ch1_salesperson.salesman_id, 'inner') \
        .withColumn("car_count", f.count("sales_car_id").over(win_func))\
        .select("salesman_id", "name", "city", "car_count").distinct()\
        .limit(1)

    return df_salesman_highest_cars


def question10(df_ch1_cars: DataFrame, df_ch1_sales: DataFrame, df_ch1_salesman: DataFrame)-> DataFrame:
    """
    Question10: What is the name and age of the salesperson who generated the highest revenue in the year 2022?

    :param spark:
    :param df_ch1_cars: dataframe with cars information, eg: model, type, style, cost etc
    :param df_ch1_sales: dataframe with car sales information, eg: sales_id, purchase_id
    :param df_ch1_salesperson: dataframe with salesperson information
    :return:
    a dataframe with salesperson's name and age who did the highest revenue in 2022
    """
    win_func = Window.partitionBy("style")

    df_ch1_sales = \
        df_ch1_sales.withColumnRenamed("car_id", "sales_car_id")\
            .withColumnRenamed("salesman_id", "id_salesman")

    df_revenue_highest_2022 = \
        df_ch1_sales.join(df_ch1_cars, df_ch1_sales.sales_car_id == df_ch1_cars.car_id, 'inner') \
            .where(f.year("purchase_date") == '2022') \
            .groupBy("id_salesman").agg(f.sum("cost_$").alias("revenue_cars"))\
            .join(df_ch1_salesman, df_ch1_sales.id_salesman == df_ch1_salesman.salesman_id, 'inner')\
            .select("salesman_id", "name", "age", "revenue_cars").orderBy(f.col("revenue_cars").desc()).limit(1)

    return df_revenue_highest_2022

